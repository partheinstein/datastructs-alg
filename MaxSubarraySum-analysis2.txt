
// WORST CASE



c1      1
c2      1
c3      1

c4      n
c5      n
c6      n

c7      n
c8      n
c9      n
c10     n


c11     sum(j, n, tj)        // let tj be the number of times this line is invoked for j
c12     sum(j, n-1, tj)
c13     sum(j, n-1, tj)
c14     sum(j, n-1, tj)
c15     sum(j, n-1, tj)
c16     sum(j, n-1, tj)
c17     sum(j, n-1, tj)






c18     1
c19     1
c20     1
c21     1
c22     1
c23     1


n(c4 + c5 + c6 + c7 + c8 + c9 + c10) + c11*sum(j,n, tj) + (c12 + c13 + c14 + c16 + c17) * sum(j, n-1, tj)

c4 to c17  = 1

7n + sum(j, n, tj) + 5*sum(j, n-1, tj)
// tj = j
7n + (n(n+1))/2 - 1 + 5*(n(n-1)/2)
7n + 0.5n^2 + 0.5n -1 + 5*(0.5n^2 - 0.5n)
7n + 0.5n^2 + 0.5n -1 + 2.5n^2 - 2.5n
3n^2 + 10n 



-2 1 -3 4 -1 2 1 -5 4

maxSum = -10000
maxi = 0
maxLength = 9

i = 0
sum = -2
length = 1
maxSum = -2
maxLength = 1
maxi = 0
j = 1
sum = -2 + 1 = 1
 maxSum = 1
length = 2
 maxLength = 2
 maxi = 0
j = 2
sum = 1 + -3 = -2

i = 1
sum = 1
length = 1
sum = 1 + -3 = -2

i = 2
sum = -3
j= 3
sum = -3 + 4 = 1

i = 3
sum = arr[3] = 4
length = 1
sum > maxSum (4 > -1) true
 maxSum = 4
 maxLength = 1
 maxi = 3
j = 4
sum = 4 + -1 = 3
sum > maxSum (3 > 4) false
length = 2
j = 5
sum = 3 + 2 = 5
length = 3
sum > maxSum (5 > 3) true
 maxSum = 5
 length = 3
 maxLength = 3  
































